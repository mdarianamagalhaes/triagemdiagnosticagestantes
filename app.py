# -*- coding: utf-8 -*-
"""
Created on Sat Apr  5 10:07:11 2025

@author: arian
"""
# --- CLASSES DE PROTOCOLOS DIAGN√ìSTICOS (iguais aos anteriores, mantidas para reutiliza√ß√£o) ---
class EmergenciaCardiovascular:
    def __init__(self):
        self.tipo_dor = None
        self.fatores_agravantes = None
        self.fatores_risco = None
        self.ecg_resultado = None
        self.marcadores_cardiacos = None
        self.protocolo_negativo = False

    def iniciar(self):
        print("\nüìç Iniciando protocolo: Infarto Agudo do Mioc√°rdio")
        self.classificar_dor()
        self.fatores_agravantes_alivio()
        self.fatores_risco_func()
        self.realizar_ecg()

    def classificar_dor(self):
        print("Classifique o tipo de dor:")
        print("1 - Dor Tipo A (Definitivamente anginosa)")
        print("2 - Dor Tipo B (Provavelmente anginosa)")
        print("3 - Dor Tipo C (Provavelmente n√£o anginosa)")
        print("4 - Dor Tipo D (Definitivamente n√£o anginosa)")
        escolha = input("Escolha o tipo de dor (1-4): ")
        tipos = {"1": "A", "2": "B", "3": "C", "4": "D"}
        self.tipo_dor = tipos.get(escolha)
        if self.tipo_dor is None:
            print("Op√ß√£o inv√°lida. Tente novamente.")
            self.classificar_dor()

    def fatores_agravantes_alivio(self):
        print("A dor piora com esfor√ßo ou alivia com repouso ou nitrato? (sim/n√£o)")
        self.fatores_agravantes = input("Resposta: ").strip().lower()

        print("Dura√ß√£o da dor superior a 10 minutos? (sim/n√£o)")
        resposta = input("Resposta: ").strip().lower()
        if resposta == 'sim':
            self.fatores_agravantes += " | dura√ß√£o > 10 min"

    def fatores_risco_func(self):  # Renomeado para evitar conflito com o atributo
        print("A paciente tem fatores de risco? (HAS, idade > 60 anos, dislipidemia, tabagismo, diabetes mellitus, aterosclerose manifesta) (sim/n√£o)")
        self.fatores_risco = input("Resposta: ").strip().lower()

    def realizar_ecg(self):
        print("Realizar ECG em at√© 10 minutos.")
        print("O ECG apresenta Supra ST ou Bloqueio de Ramo Novo? (sim/n√£o)")
        resposta = input("Resposta: ").strip().lower()
        if resposta == 'sim':
            self.ecg_resultado = "Infarto com Supra ST"
            print("Infarto com Supra ST. Tratamento imediato para SCA.")
            self.tratamento_imediato()
        else:
            self.ecg_resultado = "Isquemia ou Altera√ß√µes Inespec√≠ficas"
            self.monitoramento_continuo()

    def monitoramento_continuo(self):
        print("Iniciar monitoramento cont√≠nuo por 9 horas.")
        print("Realizar avalia√ß√µes a cada 3 horas.")
        print("Avalia√ß√µes necess√°rias: Exame f√≠sico, ECG seriado, Marcadores card√≠acos.")
        self.marcadores_cardiacos = input("Exames de marcadores card√≠acos realizados? (sim/n√£o): ").strip().lower()
        if self.marcadores_cardiacos == 'sim':
            print("Realizar avalia√ß√£o final do protocolo.")
            self.protocolo_final()

    def protocolo_final(self):
        print("O protocolo foi positivo? (sim/n√£o): ")
        resposta = input("Resposta: ").strip().lower()
        if resposta == 'sim':
            print("Diagn√≥stico de SCA confirmado.")
            self.tratamento_imediato()
        else:
            self.protocolo_negativo = True
            print("Descartar SCA e avaliar outras causas de dor tor√°cica.")

    def tratamento_imediato(self):
        print("üîç Determinar etiologia do IAM na gestante orienta a conduta:")
        print("- Les√£o ateroscler√≥tica ‚Üí Revasculariza√ß√£o (ICP ou CRM).")
        print("- Dissec√ß√£o coron√°ria ‚Üí Terapia conservadora (salvo complica√ß√µes graves).")
        print("- Trombo coronariano ‚Üí Aspira√ß√£o + angioplastia com bal√£o (stent como resgate).")
        
        print("\nüõë Tratamento inicial:")
        print("‚û°Ô∏è Medidas gerais:")
        print("- Baixo risco: observa√ß√£o em pronto-socorro ou unidade de dor tor√°cica.")
        print("- Risco intermedi√°rio/alto: UCO ou UTI.")
        print("- Monitoriza√ß√£o eletrocardiogr√°fica cont√≠nua e acesso venoso perif√©rico.")
        print("- O2 se SpO2 < 90% (cateter 2-4 L/min).")
        print("- Dor refrat√°ria: morfina IV 2-4 mg, repetir a cada 5-10 min se necess√°rio.")
        print("‚ö†Ô∏è Evitar morfina em casos de n√°useas, v√¥mitos ou hipotens√£o.")
        
        print("\nüíä Medicamentos e terapias:")
        print("- Aspirina: 75-162 mg/dia (segura ap√≥s 1¬∫ trimestre).")
        print("- Clopidogrel: usar apenas se necess√°rio; suspender 7 dias antes do parto.")
        print("  ‚û§ Dupla antiagrega√ß√£o (AAS + Clopidogrel) por 1 m√™s ap√≥s stent; at√© 3 meses se alto risco isqu√™mico.")
        print("  ‚ö†Ô∏è N√£o usar prasugrel, ticagrelor, bivalirudina ou inibidores GP IIb/IIIa.")
        print("- Betabloqueadores: seguros.")
        print("  ‚û§ Metoprolol (at√© 200mg/dia, risco C), Atenolol (at√© 100mg/dia, risco D).")
        print("- Nitratos: usar com cautela. Evitar se PAS < 100 mmHg.")
        print("  ‚û§ Dinitrato de isossorbida SL: 5 mg, at√© 3 doses/5 min.")
        print("  ‚û§ Nitroglicerina IV: iniciar com 10 ¬µg/min, ajustar conforme sintomas/PA.")
        
        print("\nüß™ Anticoagula√ß√£o:")
        print("- Enoxaparina: 1 mg/kg SC 12/12h; se ClCr < 30 ml/min ‚Üí 1x/dia.")
        print("  ‚ö†Ô∏è Contraindicada em sangramento ativo, plaquetopenia importante, coagulopatias.")
        print("- Suspender heparina antes do parto para reduzir risco de sangramento.")
        
        print("\nüë∂ Monitoramento fetal cont√≠nuo.")
        
        print("\nüóìÔ∏è Planejamento do parto:")
        print("- Adiar parto por 2-3 semanas ap√≥s IAM, se est√°vel.")
        print("- Parto vaginal preferido; ces√°rea em casos inst√°veis.")
        
        print("\nüö´ Medicamentos contraindicados:")
        print("- Estatinas, iECA, ARBs, fibrinol√≠ticos (sem estudos seguros na gravidez).")
        print("- Evitar drogas vasoativas como methergina e prostaglandinas.")

class DisturbioHipertensivoGestacao:
    def __init__(self):
        self.pa_sistolica = None
        self.pa_diastolica = None
        self.proteinuria_24h = None
        self.indice_proteinuria_creatinina = None
        self.ast = None
        self.alt = None
        self.creatinina = None
        self.plaquetas = None
        self.dhl = None
        self.sintomas = []
        self.idade_gestacional = None
        self._diagnostico_final = None  # Armazena o diagn√≥stico para reuso

    def iniciar(self):
        print("\nüìç Iniciando protocolo: Dist√∫rbios Hipertensivos da Gesta√ß√£o")

        self.pa_sistolica = int(input("Press√£o sist√≥lica (mmHg): "))
        self.pa_diastolica = int(input("Press√£o diast√≥lica (mmHg): "))
        self.idade_gestacional = int(input("Idade gestacional (semanas): "))

        self.proteinuria_24h = float(input("Protein√∫ria em 24h (mg): "))
        self.indice_proteinuria_creatinina = float(input("√çndice protein√∫ria/creatinina (mg/dL): "))
        self.ast = float(input("AST (U/L): "))
        self.alt = float(input("ALT (U/L): "))
        self.creatinina = float(input("Creatinina s√©rica (mg/dL): "))
        self.plaquetas = int(input("Plaquetas (/mm¬≥): "))
        self.dhl = float(input("DHL (U/L): "))

        sintomas = input("Liste os sintomas separados por v√≠rgula (ex: cefaleia intensa, escotomas, dor epig√°strica, convulsao): ")
        self.sintomas = [s.strip().lower() for s in sintomas.split(",")]

        self._diagnostico_final = self.diagnostico()
        print(f"\nüîé Diagn√≥stico: {self._diagnostico_final}")
        self.conduta()

    def diagnostico(self):
        hipertensao = self.pa_sistolica >= 140 or self.pa_diastolica >= 90
        hipertensao_grave = self.pa_sistolica >= 160 or self.pa_diastolica >= 110
        proteinuria = self.proteinuria_24h > 300 or self.indice_proteinuria_creatinina >= 0.3
        lesao_renal = self.creatinina > 1.1
        trombocitopenia = self.plaquetas < 100000
        enzimas_hepaticas_elevadas = self.ast > 80 or self.alt > 80
        dhl_alto = self.dhl >= 600
        sintomas_graves = any(s in self.sintomas for s in ['cefaleia intensa', 'escotomas', 'dor epig√°strica', 'vis√£o turva', 'edema pulmonar', 'convulsao'])

        if hipertensao and self.idade_gestacional < 20:
            return "Hipertens√£o cr√¥nica"

        if hipertensao and self.idade_gestacional >= 20:
            if 'convulsao' in self.sintomas:
                return "Ecl√¢mpsia"

            if hipertensao_grave or sintomas_graves or trombocitopenia or enzimas_hepaticas_elevadas or lesao_renal:
                if trombocitopenia and dhl_alto and enzimas_hepaticas_elevadas:
                    return "S√≠ndrome HELLP"
                return "Pr√©-ecl√¢mpsia com crit√©rios de gravidade"

            elif proteinuria:
                return "Pr√©-ecl√¢mpsia"

            return "Hipertens√£o gestacional"

        return "Sem dist√∫rbio hipertensivo"

    def conduta(self):
        print("\nüìã Conduta sugerida:")

        hipertensao = self.pa_sistolica >= 140 or self.pa_diastolica >= 90
        hipertensao_grave = self.pa_sistolica >= 160 or self.pa_diastolica >= 110
        eclampsia = "convulsao" in self.sintomas
        idade_gestacional = self.idade_gestacional
        diagnostico = self._diagnostico_final or self.diagnostico()

        if eclampsia:
            print("üü£ ECL√ÇMPSIA ‚Äì Manejo de crise convulsiva:")
            print("‚Ä¢ Sulfato de Magn√©sio (Esquema de Pritchard):")
            print("  - Ataque: 4g IV lento + 10g IM (5g por n√°dega).")
            print("  - Manuten√ß√£o: 5g IM a cada 4h.")
            print("‚Ä¢ Alternativa: Esquema de Zuspan: 4g IV + 1g/h em bomba de infus√£o.")
            print("‚Ä¢ Acompanhar diurese, FR e reflexos tendinosos.")
            print("‚Ä¢ Ant√≠doto: Gluconato de c√°lcio 10%, 1 ampola IV.")
            print("‚Ä¢ Considerar parto imediato ap√≥s estabiliza√ß√£o.")
            return

        if hipertensao_grave:
            print("üî¥ EMERG√äNCIA HIPERTENSIVA:")
            print("‚Ä¢ Dec√∫bito lateral esquerdo.")
            print("‚Ä¢ Instalar SG 5% EV.")
            print("‚Ä¢ Nifedipina 10 mg VO, repetir a cada 30 min at√© controle (m√°x 30 mg).")
            print("‚Ä¢ Se falha: Hidralazina 5 mg IV (repetir at√© 20 mg).")
            print("‚Ä¢ Alternativa: Labetalol IV (20 mg ‚Üí 40 mg ‚Üí at√© 220 mg).")
            print("‚Ä¢ Monitorar PA a cada 5 min e cardiotocografia por 20 min.")
            print("‚Ä¢ Objetivo: manter PA <160/110 mmHg e >135/85 mmHg.")

        elif hipertensao:
            print("üü° HIPERTENS√ÉO (Cr√¥nica ou Gestacional):")
            print("‚Ä¢ Monitoramento da PA a cada 1-2 semanas.")
            print("‚Ä¢ Medicamentos de 1¬™ linha:")
            print("  - Metildopa: 250‚Äì500 mg VO 2‚Äì3x/dia, m√°x 3000 mg/dia.")
            print("  - Nifedipino LA: iniciar 10 mg VO, ajustar at√© 120 mg/dia.")
            print("  - Labetalol: 20 mg IV em bolus, m√°x 220 mg.")
            print("  - Metoprolol: 12,5 mg VO, m√°x 200 mg/dia.")
            print("‚Ä¢ Segunda linha:")
            print("  - Clonidina: 0,2‚Äì0,6 mg/dia.")
            print("  - Hidralazina: 25 mg, 4x/dia, m√°x 200 mg/dia.")
            print("‚Ä¢ Objetivo: PA <140/90 mmHg.")
            print("‚Ä¢ Acompanhamento fetal regular.")
            print("‚Ä¢ Evitar repouso absoluto, dietas hiposs√≥dicas ou perda de peso.")
            print("‚Ä¢ Contraindicados: IECA, BRA, inibidores diretos da renina, espironolactona, atenolol.")

        # Avalia√ß√£o de sinais de gravidade
        if any(palavra in sint for sint in self.sintomas for palavra in ["cefaleia", "escotoma", "epig√°strica"]):
            print("\n‚ö†Ô∏è Sinais de gravidade detectados: avaliar possibilidade de parto imediato.")

        # Condutas espec√≠ficas
        if "pr√©-ecl√¢mpsia com crit√©rios de gravidade" in diagnostico.lower():
            if idade_gestacional < 34:
                print("\nüî¥ PR√â-ECL√ÇMPSIA GRAVE (<34 semanas):")
                print("‚Ä¢ Interna√ß√£o e avalia√ß√£o materno-fetal por 24h.")
                print("‚Ä¢ Sulfato de magn√©sio e anti-hipertensivos se PAS ‚â•160 e/ou PAD ‚â•110.")
                print("‚Ä¢ Corticoide para matura√ß√£o pulmonar.")
                print("‚Ä¢ Se complica√ß√µes maternas ou fetais ‚Üí parto imediato.")
            else:
                print("\nüî¥ PR√â-ECL√ÇMPSIA GRAVE (‚â•34 semanas):")
                print("‚Ä¢ Indicar parto pela via apropriada.")
                print("‚Ä¢ Terceira etapa do parto vaginal deve ser ativa (preven√ß√£o de hemorragia).")

        elif "pr√©-ecl√¢mpsia" in diagnostico.lower():
            if idade_gestacional < 34:
                print("\nüë∂ PR√â-ECL√ÇMPSIA (<34 semanas):")
                print("‚Ä¢ Monitoramento rigoroso.")
                print("‚Ä¢ Corticoide para matura√ß√£o pulmonar:")
                print("  - Betametasona 12 mg IM a cada 24h (2 doses) OU")
                print("  - Dexametasona 6 mg IM a cada 12h (4 doses).")
                print("‚Ä¢ Avaliar prolongamento da gesta√ß√£o por at√© 1‚Äì2 semanas.")
            elif idade_gestacional < 40:
                print("\nüë∂ PR√â-ECL√ÇMPSIA (<40 semanas):")
                print("‚Ä¢ Monitoramento cl√≠nico e laboratorial.")
            else:
                print("\nüë∂ PR√â-ECL√ÇMPSIA (‚â•40 semanas):")
                print("‚Ä¢ Indicar parto ap√≥s estabiliza√ß√£o cl√≠nica e hemodin√¢mica.")

        # Via de parto
        print("\nüöº Considera√ß√µes sobre via de parto:")
        print("‚Ä¢ Prefer√™ncia por parto vaginal, exceto indica√ß√£o obst√©trica para ces√°rea.")
        print("‚Ä¢ Indu√ß√£o deve considerar maturidade e condi√ß√µes do colo.")
        print("‚Ä¢ Parto ces√°reo urgente se instabilidade materna ou sofrimento fetal.")

class InsuficienciaCardiaca:
    def __init__(self):
        self.fatores_risco = 0
        self.sintomas_chave = 0
        self.criterios_maiores = 0
        self.criterios_menores = 0

    def obter_resposta(self, pergunta):
        resposta = input(f"{pergunta} (sim/n√£o): ").strip().lower()
        while resposta not in ["sim", "n√£o"]:
            print("Resposta inv√°lida! Por favor, responda 'sim' ou 'n√£o'.")
            resposta = input(f"{pergunta} (sim/n√£o): ").strip().lower()
        return resposta == "sim"

    def identificar_fatores_risco(self):
        print("\nüîç Verificando fatores de risco...")
        perguntas = [
            "A paciente tem hipertens√£o arterial cr√¥nica ou pr√©-ecl√¢mpsia?",
            "A paciente tem doen√ßas valvares ou cardiopatias cong√™nitas preexistentes?",
            "A paciente tem mais de 35 anos ou est√° na adolesc√™ncia?",
            "A paciente est√° com gravidez m√∫ltipla?",
            "A paciente tem IMC > 30 kg/m¬≤?",
            "A paciente usa drogas cardiot√≥xicas (como coca√≠na ou Œ≤-agonistas)?",
            "A paciente tem baixo n√≠vel socioecon√¥mico ou desnutri√ß√£o?",
            "H√° hist√≥rico familiar de insufici√™ncia card√≠aca ou cardiopatias?",
            "A paciente tem doen√ßa renal cr√¥nica?",
            "A paciente tem diabetes mellitus gestacional ou tipo 2?"
        ]
        self.fatores_risco = sum(self.obter_resposta(p) for p in perguntas)

    def avaliar_sintomas_chave(self):
        print("\nü©∫ Verificando sintomas-chave...")
        perguntas = [
            "A paciente apresenta dispneia progressiva (ao esfor√ßo ou deitada)?",
            "A paciente apresenta ortopneia?",
            "A paciente apresenta dispneia parox√≠stica noturna?",  # crit√©rio maior
            "A paciente apresenta edema generalizado, pior ao longo do dia?",
            "A paciente tem fadiga intensa, desproporcional √† atividade di√°ria?",
            "A paciente apresenta dor tor√°cica?",
            "A paciente apresenta sintomas gastrointestinais como n√°useas ou distens√£o abdominal?"
        ]
        self.sintomas_chave = sum(self.obter_resposta(p) for p in perguntas)

    def avaliar_exames(self):
        print("\nüß™ Avalia√ß√£o dos crit√©rios diagn√≥sticos de Frammingham:")

        if self.obter_resposta("A paciente apresenta dispneia parox√≠stica noturna?"):
            self.criterios_maiores += 1

        if self.obter_resposta("Houve perda de 4,5 kg ap√≥s 5 dias de tratamento?"):
            self.criterios_maiores += 1

        if self.obter_resposta("H√° turg√™ncia jugular patol√≥gica?"):
            self.criterios_maiores += 1

        if self.obter_resposta("H√° estertores crepitantes √† ausculta pulmonar?"):
            self.criterios_maiores += 1

        if self.obter_resposta("A paciente teve epis√≥dio de edema agudo de pulm√£o?"):
            self.criterios_maiores += 1

        if self.obter_resposta("A press√£o venosa central (PVC) est√° > 16 cmH2O?"):
            self.criterios_maiores += 1

        if self.obter_resposta("H√° refluxo hepatojugular?"):
            self.criterios_maiores += 1

        if self.obter_resposta("Radiografia mostra aumento da silhueta card√≠aca (cardiomegalia)?"):
            self.criterios_maiores += 1

        if self.obter_resposta("H√° presen√ßa da terceira bulha (B3) na ausculta card√≠aca?"):
            self.criterios_maiores += 1

        print("\nüìâ Verificando crit√©rios menores...")
        perguntas_menores = [
            "A paciente apresenta tosse noturna?",
            "H√° edema bilateral de tornozelos?",
            "A paciente apresenta dispneia aos esfor√ßos?",
            "H√° hepatomegalia?",
            "A capacidade vital est√° reduzida a 1/3 do normal?",
            "A paciente apresenta taquicardia > 120 bpm?"
        ]
        self.criterios_menores = sum(self.obter_resposta(p) for p in perguntas_menores)

        print("\nüß¨ Exames complementares adicionais:")
        if self.obter_resposta("O ecocardiograma mostra fra√ß√£o de eje√ß√£o (FE) < 40%?"):
            print("- FE < 40% indica IC. FE < 30% indica IC grave.")
        if self.obter_resposta("H√° disfun√ß√£o diast√≥lica ou regurgita√ß√£o valvar ao ecocardiograma?"):
            print("- Ind√≠cio de comprometimento estrutural card√≠aco.")
        if self.obter_resposta("Radiografia mostra congest√£o pulmonar, linhas de Kerley ou derrame pleural?"):
            print("- Sinais sugestivos de IC.")
        if self.obter_resposta("ECG mostra taquicardia sinusal, arritmias ou sinais de sobrecarga ventricular?"):
            print("- ECG alterado.")
        if self.obter_resposta("BNP > 100 pg/mL?"):
            print("- BNP elevado: compat√≠vel com IC.")
        if self.obter_resposta("Creatinina ou ureia est√£o elevadas?"):
            print("- Avaliar poss√≠vel hipoperfus√£o renal ou sobrecarga vol√™mica.")

    def aplicar_criterios_diagnostico(self):
        print("\nüìã Aplicando crit√©rios diagn√≥sticos (Framingham)...")
        if self.criterios_maiores >= 2 or (self.criterios_maiores >= 1 and self.criterios_menores >= 2):
            print("\nüî¥ Diagn√≥stico de Insufici√™ncia Card√≠aca Confirmado!")
            return True
        else:
            print("\nüü¢ Diagn√≥stico de IC N√ÉO confirmado com os crit√©rios atuais.")
            return False

    def recomendar_tratamento(self):
        print("\nüíä Recomenda√ß√µes terap√™uticas:")
        if self.obter_resposta("A paciente apresenta congest√£o pulmonar?"):
            print("- üíß Furosemida 20‚Äì40 mg IV/VO. Evitar excesso para prevenir hipovolemia.")
        if self.obter_resposta("A press√£o arterial est√° elevada e sem controle adequado?"):
            print("- üíä Hidroclorotiazida 12,5‚Äì25 mg VO (adjuvante no controle da PA).")
        if self.obter_resposta("A paciente apresenta disfun√ß√£o do VE e est√° est√°vel hemodinamicamente?"):
            print("- ü´Ä Metoprolol 25‚Äì100 mg/dia. Observar risco de bradicardia fetal e RCIU.")
        if self.obter_resposta("A paciente tem IC grave ou FE < 30%?"):
            print("- üíâ Nitratos + Hidralazina (iniciar hidralazina 10 mg 3‚Äì4x/dia).")
            print("- üíâ Enoxaparina 1 mg/kg 12/12h. Reduzir para 1x/dia se ClCr < 30 mL/min.")
        if self.obter_resposta("A contratilidade do VE est√° reduzida?"):
            print("- üíä Digoxina 0,25 mg/dia. Monitorar n√≠vel s√©rico e sinais de toxicidade.")

        print("\nüö´ Medicamentos contraindicados na gesta√ß√£o:")
        print("- IECA, BRA, ARNI")
        print("- Espironolactona, Eplerenona")
        print("- Varfarina")
        print("- Ivabradina, Atenolol")

    def monitoramento_e_parto(self):
        print("\nüìà Monitoramento cl√≠nico e cuidados com o parto:")
        print("- Acompanhamento da fun√ß√£o card√≠aca e renal.")
        print("- Avalia√ß√£o do bem-estar fetal (movimentos, crescimento).")
        tipo_parto = "ces√°rea" if self.obter_resposta("A paciente est√° em IC avan√ßada e inst√°vel?") else "parto vaginal"
        print(f"- Tipo de parto preferido: {tipo_parto}.")
        print("- P√≥s-parto: reavaliar fun√ß√£o card√≠aca e ajustar tratamento convencional.")

    def executar(self):
        print("\n============================")
        print("üíó Avalia√ß√£o de Insufici√™ncia Card√≠aca na Gesta√ß√£o")
        print("============================")
        self.identificar_fatores_risco()
        self.avaliar_sintomas_chave()
        self.avaliar_exames()
        if self.aplicar_criterios_diagnostico():
            self.recomendar_tratamento()
            self.monitoramento_e_parto()
        print("\n‚úÖ Avalia√ß√£o finalizada.")

    def iniciar(self):
        self.executar()

class DisseccaoAortica:
    def __init__(self):
        self._diagnostico_final = None
        self.tipo_dissecao = None
        self.complicada = False

    def iniciar(self):
        print("\nüö® TRIAGEM: DISSEC√á√ÉO A√ìRTICA üö®")

        # Coleta de sintomas e sinais
        sintomas = input("üëâ Quais sintomas a paciente apresenta? (Separe por v√≠rgulas - Ex: dor tor√°cica, rasgando, dilacerante, iradiando para dorso, dorsal, s√≠ncope, desmaio, n√°useas): ").lower()
        sinais = input("ü©∫ Quais sinais cl√≠nicos foram observados? (Ex: sudorese, hipertens√£o): ").lower()
        fatores_risco = input("‚ö†Ô∏è H√° fatores de risco como s√≠ndrome de Marfan, hipertens√£o ou valvopatias? (sim/n√£o): ").strip().lower()
        diferenca_pa = input("üìè H√° diferen√ßa de PA entre os bra√ßos (>20 mmHg)? (sim/n√£o): ").strip().lower()
        hipotensao = input("üí• H√° hipotens√£o ou choque? (sim/n√£o): ").strip().lower()
        hipoperfusao = input("üå°Ô∏è H√° sinais de hipoperfus√£o (olig√∫ria, confus√£o mental)? (sim/n√£o): ").strip().lower()

        # Exames individualizados
        print("\nüî¨ RESULTADOS DOS EXAMES:")

        ecg_alterado = input("üìâ ECG apresenta altera√ß√µes espec√≠ficas? (sim/n√£o): ").strip().lower()
        if ecg_alterado == "sim":
            print("   ‚ö†Ô∏è Lembrar: ECG pode mostrar altera√ß√µes inespec√≠ficas. Se houver supra de ST, considerar IAM como diagn√≥stico diferencial.")

        ddimero = input("üß™ D-d√≠mero est√° elevado? (sim/n√£o): ").strip().lower()
        if ddimero == "sim":
            print("   ‚ö†Ô∏è D-d√≠mero elevado aumenta suspeita, mas √© inespec√≠fico.")

        raio_x_alterado = input("ü©ª RX de t√≥rax alterado? (mediastino alargado, derrame pleural?) (sim/n√£o): ").strip().lower()
        if raio_x_alterado == "sim":
            print("   ‚ö†Ô∏è RX pode mostrar mediastino alargado ou derrame pleural. Avaliar risco-benef√≠cio na gesta√ß√£o.")

        angiotc_realizada = input("üì∏ Angio-TC foi realizada e confirmou dissec√ß√£o? (sim/n√£o): ").strip().lower()
        if angiotc_realizada == "sim":
            print("   ‚úÖ Dissec√ß√£o confirmada na angio-TC (padr√£o ouro).")

        # Processamento
        self.dor_toracica = "dor tor√°cica" in sintomas
        self.sensacao_rasgando = "rasgando" in sintomas or "dilacerante" in sintomas
        self.irradiacao_dorsal = "irradiando para dorso" in sintomas or "dorsal" in sintomas
        self.sincopes = "s√≠ncope" in sintomas or "desmaio" in sintomas
        self.hipotensao_choque = (hipotensao == "sim")
        self.hipoperfusao = (hipoperfusao == "sim")
        self.mediastino_alargado = (raio_x_alterado == "sim")
        self.diferenca_pa_significativa = (diferenca_pa == "sim")
        self.antecedente_marfan_ou_valva = (fatores_risco == "sim")
        self.hipertensao_cronica = "hipertens√£o" in sinais

        # Diagn√≥stico
        self._diagnostico_final = self.diagnostico()
        print(f"\nüß† Diagn√≥stico prov√°vel: {self._diagnostico_final}\n")

        # Defini√ß√£o do tipo de dissec√ß√£o
        self.definir_tipo_dissecao()

        # Conduta
        self.conduta()

    def diagnostico(self):
        pontos = 0

        if self.dor_toracica and self.sensacao_rasgando:
            pontos += 2
        if self.irradiacao_dorsal or self.sincopes:
            pontos += 1
        if self.hipotensao_choque:
            pontos += 2
        if self.hipoperfusao:
            pontos += 2
        if self.diferenca_pa_significativa:
            pontos += 1
        if self.mediastino_alargado:
            pontos += 1
        if self.antecedente_marfan_ou_valva or self.hipertensao_cronica:
            pontos += 1

        if pontos >= 6:
            return "Alta suspeita de Dissec√ß√£o A√≥rtica"
        elif pontos >= 3:
            return "Suspeita moderada de Dissec√ß√£o A√≥rtica"
        else:
            return "Baixa suspeita de Dissec√ß√£o A√≥rtica"

    def definir_tipo_dissecao(self):
        print("\nüìå Agora vamos classificar a dissec√ß√£o:")
        print("   ‚û§ Tipo A: envolve a aorta ascendente, independentemente de onde se inicia.")
        print("   ‚û§ Tipo B: envolve apenas a aorta descendente, distal √† art√©ria subcl√°via esquerda.")

        tipo = input("üîé A dissec√ß√£o envolve a aorta ascendente? (sim/n√£o): ").strip().lower()
        if tipo == "sim":
            self.tipo_dissecao = "A"
        else:
            self.tipo_dissecao = "B"

        print(f"üìç Tipo de dissec√ß√£o: Tipo {self.tipo_dissecao}")

        if self.tipo_dissecao == "B":
            complicacoes = input("‚ö†Ô∏è H√° complica√ß√µes como isquemia de √≥rg√£o, dor incontrol√°vel, expans√£o do falso l√∫men ou ruptura iminente? (sim/n√£o): ").strip().lower()
            self.complicada = (complicacoes == "sim")
            if self.complicada:
                print("üí¢ Dissec√ß√£o Tipo B complicada identificada.")
            else:
                print("‚úÖ Dissec√ß√£o Tipo B n√£o complicada.")
        else:
            print("üö® Toda dissec√ß√£o Tipo A √© considerada grave e de indica√ß√£o cir√∫rgica!")

    def conduta(self):
        print("\nüìã PLANO DE CONDUTA CL√çNICA E OBST√âTRICA\n")

        if self.tipo_dissecao == "A":
            print("üî¥ Dissec√ß√£o Tipo A:")
            print(" - ‚û§ Indica√ß√£o de cirurgia de emerg√™ncia: substitui√ß√£o da aorta ascendente.")
            print(" - ‚û§ Iniciar tratamento medicamentoso para estabiliza√ß√£o at√© cirurgia:")
        elif self.tipo_dissecao == "B" and self.complicada:
            print("üü† Dissec√ß√£o Tipo B COMPLICADA:")
            print(" - ‚û§ Avalia√ß√£o para endopr√≥tese endovascular ou cirurgia.")
            print(" - ‚û§ Iniciar tratamento medicamentoso de suporte.")
        else:
            print("üü¢ Dissec√ß√£o Tipo B N√ÉO complicada:")
            print(" - ‚û§ Tratamento cl√≠nico √© o de escolha.")

        print("\nüíä Suporte medicamentoso:")
        print(" - Monitoramento hemodin√¢mico rigoroso.")
        print(" - Controle da press√£o arterial e for√ßa de cisalhamento:")
        print("   ‚Ä¢ Metoprolol IV 5mg a cada 5min (1¬™ escolha).")
        print("   ‚Ä¢ Se PA >120mmHg: Nitroprussiato de S√≥dio 0,25 mcg/kg/min IV (m√°ximo 4h).")
        print(" - Controle da dor: Morfina IV 2mg a cada 10min conforme necess√°rio.\n")

        print("ü§∞ Conduta obst√©trica:")
        print(" - Gestante est√°vel com dissec√ß√£o controlada: postergar parto at√© ‚â•34 semanas com monitoramento rigoroso.")
        print(" - Dissec√ß√£o inst√°vel: cesariana de emerg√™ncia antes da cirurgia card√≠aca.")
        print(" - ‚û§ Via de parto:")
        print("   ‚Ä¢ Ces√°rea: preferida para Tipo A ou instabilidade materna.")
        print("   ‚Ä¢ Parto vaginal: pode ser considerado em Tipo B est√°vel com controle rigoroso da PA.\n")

        print("üìà Acompanhamento:")
        print(" - Seguimento cardiol√≥gico e obst√©trico intensivo.")
        print(" - Controle rigoroso da PA durante e ap√≥s a gesta√ß√£o.")
        print(" - Avalia√ß√£o peri√≥dica da aorta no p√≥s-parto com TC ou RM seriadas.")

# --- DICION√ÅRIO DE DOEN√áAS COM SINAIS/SINTOMAS ASSOCIADOS ---
doencas = {
    "Infarto Agudo do Mioc√°rdio": {
        "classe": EmergenciaCardiovascular,
        "sintomas": [
            "dor tor√°cica", "irradia√ß√£o da dor", "dura√ß√£o da dor >10min",
            "fatores de risco (HAS, DM, dislipidemia, tabagismo, idade >60)",
            "al√≠vio com nitrato", "n√°usea", "dispneia"
        ]
    },
    "Dist√∫rbios Hipertensivos da Gesta√ß√£o": {
        "classe": DisturbioHipertensivoGestacao,
        "sintomas": [
            "pa >140/90", "cefaleia frontal ou occipital", "vis√£o emba√ßada",
            "edema persistente", "dor epig√°strica", "n√°usea e v√¥mito", "convuls√µes"
        ]
    },
    "Insufici√™ncia Card√≠aca": {
        "classe": InsuficienciaCardiaca,
        "sintomas": [
            "dispneia aos esfor√ßos", "ortopneia", "dispneia parox√≠stica noturna",
            "edema de membros inferiores", "fadiga intensa", "congest√£o abdominal", "dor tor√°cica"
        ]
    },
    "Dissec√ß√£o de Aorta": {
        "classe": DisseccaoAortica,
        "sintomas": [
            "dor tor√°cica lancinante", "dor irradiada para dorso", "sensa√ß√£o de rasgamento",
            "s√≠ncope", "tontura", "dispneia importante"
        ]
    }
}

# --- PERGUNTAS PADR√ÉO PARA AVALIA√á√ÉO INICIAL ---
perguntas_avaliacao = {
    "dor tor√°cica": "Paciente apresenta dor tor√°cica?",
    "irradia√ß√£o da dor": "A dor irradia para bra√ßo, mand√≠bula ou dorso?",
    "dura√ß√£o da dor >10min": "A dor tor√°cica dura mais de 10 minutos?",
    "fatores de risco (HAS, DM, dislipidemia, tabagismo, idade >60)": "H√° fatores de risco cardiovasculares (HAS, DM, dislipidemia, tabagismo, idade >60 anos)?",
    "al√≠vio com nitrato": "A dor alivia com repouso ou uso de nitrato?",
    "n√°usea": "Paciente relata n√°usea?",
    "dispneia": "Paciente apresenta dispneia?",
    "pa >140/90": "A press√£o arterial est√° acima de 140/90 mmHg?",
    "cefaleia frontal ou occipital": "Paciente refere cefaleia frontal ou occipital?",
    "vis√£o emba√ßada": "Paciente apresenta vis√£o emba√ßada?",
    "edema persistente": "Paciente apresenta incha√ßo (edema) persistente que n√£o melhora com repouso?",
    "dor epig√°strica": "Paciente sente dor epig√°strica ou no quadrante superior direito?",
    "n√°usea e v√¥mito": "Paciente apresenta n√°useas e v√¥mitos frequentes?",
    "convuls√µes": "Paciente apresentou convuls√µes?",
    "dispneia aos esfor√ßos": "Paciente tem falta de ar aos esfor√ßos?",
    "ortopneia": "Paciente tem dificuldade de respirar ao deitar (ortopneia)?",
    "dispneia parox√≠stica noturna": "Paciente tem crises de falta de ar durante a noite?",
    "edema de membros inferiores": "Paciente apresenta incha√ßo nas pernas?",
    "fadiga intensa": "Paciente tem cansa√ßo intenso desproporcional √† atividade?",
    "congest√£o abdominal": "H√° sintomas como n√°usea ou distens√£o abdominal?",
    "dor tor√°cica lancinante": "A dor tor√°cica √© descrita como muito intensa ou lancinante?",
    "dor irradiada para dorso": "A dor se irradia para as costas?",
    "sensa√ß√£o de rasgamento": "Paciente descreve sensa√ß√£o de rasgamento ou dilacera√ß√£o?",
    "s√≠ncope": "Paciente apresentou desmaios (s√≠ncope)?",
    "tontura": "Paciente sente tonturas frequentes?",
    "dispneia importante": "Paciente apresenta dispneia intensa, com dificuldade de falar?"
}

# --- SISTEMA DE TRIAGEM INICIAL ---

def triagem_clinica():
    print("\nü©∫ Bem-vindo ao Assistente de Avalia√ß√£o Cl√≠nica Inicial!")
    print("Responda √†s perguntas a seguir com 'sim' ou 'n√£o' üëá\n")

    respostas = {}
    for chave, pergunta in perguntas_avaliacao.items():
        resp = input(f"{pergunta} ").strip().lower()
        respostas[chave] = resp

    # --- AN√ÅLISE DOS SINTOMAS POR DOEN√áA ---
    print("\nüìä Analisando possibilidades com base nos sintomas informados...")

    sugestoes = []
    for nome_doenca, dados in doencas.items():
        sintomas_presentes = [s for s in dados["sintomas"] if respostas.get(s, "n√£o") in ["sim", "s"]]
        if sintomas_presentes:
            sugestoes.append((nome_doenca, len(sintomas_presentes), sintomas_presentes))

    sugestoes.sort(key=lambda x: x[1], reverse=True)

    if not sugestoes:
        print("‚ùå Nenhuma hip√≥tese cl√≠nica sugerida com os sintomas fornecidos.")
        return

    print("\n‚úÖ Hip√≥teses cl√≠nicas sugeridas:")
    for i, (nome, score, sintomas_encontrados) in enumerate(sugestoes, 1):
        print(f"{i}. {nome} ({score} sintomas compat√≠veis)")
        print(f"   - Sinais/sintomas compat√≠veis: {', '.join(sintomas_encontrados)}")

    while True:
        print("\nDigite o n√∫mero da hip√≥tese que deseja iniciar o protocolo.")
        print("Ou digite 0 para encerrar o atendimento.")
        escolha = input(">>> ").strip()
        if escolha == "0":
            print("‚úÖ Encerrando triagem. At√© logo!")
            break
        elif escolha.isdigit() and 1 <= int(escolha) <= len(sugestoes):
            nome_escolhido = sugestoes[int(escolha) - 1][0]
            classe_protocolo = doencas[nome_escolhido]["classe"]
            classe_protocolo().iniciar()
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")

# --- EXECU√á√ÉO DO SISTEMA ---
triagem_clinica()